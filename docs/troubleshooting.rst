Troubleshooting
=================

Pointing Database 
---------------------
The pointing database is a sqlite database, generated by `(rubin_sim) <https://rubin-sim.lsst.io/rubin_sim/index.html>`_, 
which contains information on the predicted pointing of the LSST survey. An overview of the information contained within the 
most up-to-date version of the database is given `(here) <https://rubin-sim.lsst.io/rs_scheduler/output_schema.html#>`_.

There are two versions of the pointing database and users may encounter an issue
depending on which version they are using. The pointing database that was released 
prior to (DATE) includes a column called **SummaryAllProps**, which has since been renamed
to **observations**.

The survey simulator post processing configuration file tells the code which columns in the
pointing database to read using the line::

   surveydbquery = SELECT observationId,observationStartMJD,fieldRA,fieldDEC,rotSkyPos FROM observations order by observationStartMJD

However, if you are getting an error like::
  
   pandas.io.sql.DatabaseError: Execution failed on sql 'SELECT observationStartMJD, observationId FROM observations ORDER BY observationStartMJD': no such table: observations

Then it is likely that you are using the older version of the pointing database. This
can be fixed by either updating to the newer version (which can be found here), or by changing
the **surveydbquery** line in the survey simulator configuration file to::

      surveydbquery = SELECT observationId,observationStartMJD,fieldRA,fieldDEC,rotSkyPos FROM SummaryAllProps order by observationStartMJD




Mismatch in Inputs 
---------------------
There are several files which are passed into the survey simulator. These are the 
orbit file, the physical parameter file and an optional cometary parameter file. Each provide
specific information about the synthetic population that is being analysed.

Within these files, it is necessary to specify an entry for every object. The survey simulator
post processing code will run a check to ensure that all entries have an associated 
orbit and physical/cometary parameter value, so if you get an error like::

   ERROR: PPCheckOrbitAndColourMatching: input colour/cometary parameter and orbit files do not match.

then make sure that for each file (orbit, ephemerides and physical/cometary parameters) contains information 
for each object you wish to simulate.








